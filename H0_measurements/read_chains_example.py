'''
read_chains_example.py: an example to read MCMC chains generated by run_mcmc.py.
Y.S.Murakami 2022 @ JHU
'''

import numpy as np
import h5py

import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rcParams['figure.figsize'] = (8,6)
mpl.rcParams['xtick.labelsize'] = 20
mpl.rcParams['ytick.labelsize'] = 20
mpl.rcParams['axes.grid'] = True
mpl.rcParams['grid.linestyle'] = (0, (1, 5))
mpl.rcParams['grid.color'] = 'grey'
mpl.rcParams['lines.linewidth'] = 2
mpl.rcParams['axes.labelsize'] = 22
mpl.rcParams['legend.handlelength'] = 3
mpl.rcParams['legend.fontsize'] = 20

from matplotlib import rc
rc('font', **{'family': 'serif', 'serif': ['Computer Modern']})
rc('text', usetex=True)


###### config ######
CHAIN_PATH_1 = 'posterior_yCL_HF_baseline.h5' 
CHAIN_PATH_2 = 'posterior_yCL_HF_a15.h5' 
CHAIN_PATH_3 = 'posterior_yCL_HF_a20.h5' 
CHAIN_PATH_4 = 'posterior_yCL_HF_a28.h5' 
#this file ^ is currently being uploaded to Zenodo
#in the meantime it is available here https://www.dropbox.com/s/um0oi1xglstii2y/final_v2_baseline.h5.gz?dl=0

BURNIN = 6000
####################

# Load data
samples_1 = h5py.File(CHAIN_PATH_1,'r')['mcmc']['chain'][:,:,:]
samples_2 = h5py.File(CHAIN_PATH_2,'r')['mcmc']['chain'][:,:,:]
samples_3 = h5py.File(CHAIN_PATH_3,'r')['mcmc']['chain'][:,:,:]
samples_4 = h5py.File(CHAIN_PATH_4,'r')['mcmc']['chain'][:,:,:]

# The loaded chains are raw (=uncut) and you need to apply burnin.
# For the discussion on burnin-size, see Sec. 5.1 (MCMC Sampling) of the SH0ES paper.
samples_burnin_1 = samples_1[BURNIN:,:,:]
samples_burnin_2 = samples_2[BURNIN:,:,:]
samples_burnin_3 = samples_3[BURNIN:,:,:]
samples_burnin_4 = samples_4[BURNIN:,:,:]

# Once the burnin is applied, one can flatten the chains
# Don't forget to apply formula to obtain the physical quantity.
H0_idx = -1
fivelogH0_1 = samples_burnin_1[:,:,H0_idx].flatten()
fivelogH0_2 = samples_burnin_2[:,:,H0_idx].flatten()
fivelogH0_3 = samples_burnin_3[:,:,H0_idx].flatten()
fivelogH0_4 = samples_burnin_4[:,:,H0_idx].flatten()
H0_samples_1 = 10**(fivelogH0_1/5)
H0_samples_2 = 10**(fivelogH0_2/5)
H0_samples_3 = 10**(fivelogH0_3/5)
H0_samples_4 = 10**(fivelogH0_4/5)

lower_1 = np.quantile(H0_samples_1, 0.16)
median_1 = np.quantile(H0_samples_1, 0.5)
upper_1 = np.quantile(H0_samples_1, 0.84)
lower_2 = np.quantile(H0_samples_2, 0.16)
median_2 = np.quantile(H0_samples_2, 0.5)
upper_2 = np.quantile(H0_samples_2, 0.84)
lower_3 = np.quantile(H0_samples_3, 0.16)
median_3 = np.quantile(H0_samples_3, 0.5)
upper_3 = np.quantile(H0_samples_3, 0.84)
lower_4 = np.quantile(H0_samples_4, 0.16)
median_4 = np.quantile(H0_samples_4, 0.5)
upper_4 = np.quantile(H0_samples_4, 0.84)

# Now it's ready for analyses/plotting!

fig, ax = plt.subplots()
fig.set_size_inches(6, 4)

ax.hist(H0_samples_1, bins=20, density=True, histtype='step', 
           ls='-', edgecolor='black', label=r'$\alpha=0.0$', alpha=0.7, lw=1)
ax.hist(H0_samples_2, bins=20, density=True, histtype='step', 
           ls='--', edgecolor='blue', label=r'$\alpha=1.5$', lw=1)
ax.hist(H0_samples_3, bins=20, density=True, histtype='step', 
           ls='--', edgecolor='red', label=r'$\alpha=2.0$', lw=1)
ax.hist(H0_samples_4, bins=20, density=True, histtype='step', 
           ls='--', edgecolor='red', label=r'$\alpha=2.0$', lw=1)

ax.set_xlim(68, 78)
ax.set_ylim(0, 0.6)
ax.set_xlabel(r'$H_0 ~ [{\rm km}~{\rm s}^{-1}~{\rm Mpc}]$')
ax.set_ylabel(r'$p(H_0)$')
ax.legend(framealpha=0, loc='upper left', fontsize=13, handlelength=1.5)

ax.tick_params(axis='both', which='major', direction='in', 
                    bottom=True, top=True, left=True, right=True)
ax.tick_params(axis='both', which='minor', direction='in', 
                    bottom=True, top=True, left=True, right=True)

fig.savefig('H0_hist_munged_SNe_HF.pdf', bbox_inches='tight')

print(np.mean(H0_samples_1), np.std(H0_samples_1))
print(np.mean(H0_samples_2), np.std(H0_samples_2))
print(np.mean(H0_samples_3), np.std(H0_samples_3))
print(np.mean(H0_samples_4), np.std(H0_samples_4))
